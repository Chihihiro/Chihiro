from engine import *


list = ['JR133164',
'JR003639',
'JR102014',
'JR042390',
'JR003262',
'JR077208',
'JR003313',
'JR003460',
'JR003412',
'JR003186',
'JR003300',
'JR003326',
'JR003181',
'JR003004',
'JR128440',
'JR083319',
'JR049056',
'JR003011',
'JR100794',
'JR003390',
'JR128448',
'JR002992',
'JR035519',
'JR111274',
'JR032321',
'JR003324',
'JR090171',
'JR003734',
'JR003735',
'JR003736',
'JR003221',
'JR003006',
'JR128421',
'JR003108',
'JR003050',
'JR003051',
'JR003052',
'JR003071',
'JR003524',
'JR128469',
'JR101506',
'JR112787',
'JR112788',
'JR090204',
'JR128432',
'JR128460',
'JR101026',
'JR133147',
'JR107978',
'JR107977',
'JR127476',
'JR128446',
'JR128577',
'JR099857',
'JR128398',
'JR128546',
'JR041422',
'JR059835',
'JR106854',
'JR133134',
'JR061681',
'JR028560',
'JR128407',
'JR059444',
'JR058771',
'JR035361',
'JR034572',
'JR042245',
'JR055460',
'JR080967',
'JR027169',
'JR057775',
'JR004160',
'JR127499',
'JR045240',
'JR054058',
'JR004138',
'JR069044',
'JR004154',
'JR003698',
'JR066783',
'JR128420',
'JR128436',
'JR003587',
'JR107458',
'JR128441',
'JR128422',
'JR003718',
'JR003793',
'JR003794',
'JR003795',
'JR003796',
'JR003797',
'JR003798',
'JR003799',
'JR003800',
'JR003801',
'JR003802',
'JR003778',
'JR128439',
'JR101329',
'JR106418',
'JR106417',
'JR174669',
'JR003859',
'JR128438',
'JR128529',
'JR029833',
'JR106416',
'JR101426',
'JR003925',
'JR003948',
'JR106191',
'JR106189',
'JR106192',
'JR071720',
'JR110571',
'JR133169',
'JR052812',
'JR101041',
'JR107488',
'JR106419',
'JR003959',
'JR004136',
'JR000008',
'JR128569',
'JR004255',
'JR004250',
'JR087576',
'JR128541',
'JR099811',
'JR174702',
'JR107511',
'JR090203',
'JR130381',
'JR112249',
'JR101100',
'JR004377',
'JR004323',
'JR133128',
'JR082589',
'JR115108',
'JR099825',
'JR046089',
'JR107238',
'JR114957',
'JR112233',
'JR122363',
'JR109910',
'JR112235',
'JR004523',
'JR012190',
'JR110077',
'JR012256',
'JR004646',
'JR084034',
'JR130379',
'JR100688',
'JR110179',
'JR004589',
'JR174828',
'JR108311',
'JR128090',
'JR036425',
'JR127968',
'JR004780',
'JR077413',
'JR012370',
'JR004722',
'JR067785',
'JR012055',
'JR098721',
'JR107019',
'JR098829',
'JR098710',
'JR012516',
'JR078422',
'JR051120',
'JR109400',
'JR174763',
'JR073084',
'JR100398',
'JR004622',
'JR074063',
'JR004750',
'JR084173',
'JR012431',
'JR073754',
'JR078248',
'JR012443',
'JR115526',
'JR055510',
'JR005763',
'JR066038',
'JR068431',
'JR174830',
'JR053706',
'JR004435',
'JR098824',
'JR107505',
'JR101740',
'JR100420',
'JR110684',
'JR000423',
'JR006389',
'JR005002',
'JR083221',
'JR075917',
'JR031734',
'JR084050',
'JR107820',
'JR100717',
'JR074077',
'JR078359',
'JR005148',
'JR013177',
'JR031742',
'JR058294',
'JR107194',
'JR054246',
'JR066642',
'JR122531',
'JR004645',
'JR083212',
'JR012845',
'JR004860',
'JR048541',
'JR111788',
'JR012311',
'JR083220',
'JR072382',
'JR110686',
'JR005105',
'JR109782',
'JR078166',
'JR005251',
'JR013255',
'JR107504',
'JR094857',
'JR094856',
'JR094855',
'JR107503',
'JR109784',
'JR038404',
'JR036295',
'JR115796',
'JR083587',
'JR111549',
'JR013814',
'JR013900',
'JR114857',
'JR014995',
'JR014922',
'JR064032',
'JR098660',
'JR053280',
'JR071533',
'JR115795',
'JR013632',
'JR014143',
'JR002575',
'JR013895',
'JR013896',
'JR115600',
'JR006781',
'JR005375',
'JR030096',
'JR008933',
'JR008936',
'JR008945',
'JR008944',
'JR008942',
'JR008947',
'JR008935',
'JR008938',
'JR008948',
'JR008943',
'JR008950',
'JR008941',
'JR008949',
'JR008937',
'JR008940',
'JR008934',
'JR008946',
'JR008952',
'JR008939',
'JR008930',
'JR008951',
'JR008931',
'JR008932',
'JR005410',
'JR005409',
'JR005439',
'JR005435',
'JR014819',
'JR069919',
'JR078485',
'JR005905',
'JR027383',
'JR005532',
'JR112328',
'JR006429',
'JR008162',
'JR005554',
'JR005926',
'JR056605',
'JR112252',
'JR000790',
'JR100084',
'JR100085',
'JR027548',
'JR006655',
'JR029009',
'JR007008',
'JR006178',
'JR069986',
'JR073844',
'JR077178',
'JR051031',
'JR005583',
'JR017791',
'JR006712',
'JR006793',
'JR060684',
'JR059757',
'JR032932',
'JR032053',
'JR006017',
'JR080898',
'JR069925',
'JR005920',
'JR005918',
'JR078733',
'JR063370',
'JR066084',
'JR006040',
'JR006794',
'JR009255',
'JR029170',
'JR115511',
'JR006257',
'JR015111',
'JR076176',
'JR006162',
'JR027447',
'JR027448',
'JR027449',
'JR080813',
'JR027493',
'JR006215',
'JR006216',
'JR006217',
'JR006218',
'JR006219',
'JR006220',
'JR080950',
'JR080955',
'JR007339',
'JR090010',
'JR006946',
'JR006947',
'JR006948',
'JR006342',
'JR027308',
'JR005298',
'JR006343',
'JR006843',
'JR006829',
'JR005822',
'JR006835',
'JR027319',
'JR005127',
'JR083533',
'JR006789',
'JR006790',
'JR041815',
'JR083628',
'JR083629',
'JR083630',
'JR058292',
'JR068875',
'JR081030',
'JR076477',
'JR005852',
'JR005851',
'JR083475',
'JR007132',
'JR012300',
'JR013355',
'JR013264',
'JR012649',
'JR013281',
'JR012862',
'JR013457',
'JR004620',
'JR007013',
'JR011367',
'JR014543',
'JR017137',
'JR018374',
'JR019724',
'JR024553',
'JR024681',
'JR024909',
'JR026767',
'JR027286',
'JR048780',
'JR056377',
'JR078343',
'JR079550',
'JR079852',
'JR080835',
'JR082311',
'JR090022',
'JR090023',
'JR100945',
'JR107699',
'JR109345',
'JR109989',
'JR128414',
'JR128435',
'JR128461',
'JR128480',
'JR128482',
'JR128483',
'JR130072',
'JR133127',
'JR134292',
'JR134315',
'JR134341',
'JR134359',
'JR134385',
'JR136344',
'JR136350',
'JR136385',
'JR136386',
'JR138125',
'JR138128',
'JR138129',
'JR138132',
'JR138133',
'JR138144',
'JR141461',
'JR141552',
'JR147083',
'JR147088',
'JR147093',
'JR147095',
'JR147096',
'JR147099',
'JR147100',
'JR147101',
'JR147102',
'JR147103',
'JR147104',
'JR147148',
'JR147323',
'JR147324',
'JR147325',
'JR147326',
'JR147327',
'JR147328',
'JR147329',
'JR147341',
'JR153156',
'JR153157',
'JR157136',
'JR157138',
'JR157139',
'JR157146',
'JR157165',
'JR157168',
'JR157174',
'JR157247',
'JR157248',
'JR157256',
'JR157257',
'JR157258',
'JR157260',
'JR157265',
'JR157267',
'JR157268',
'JR157269',
'JR157270',
'JR157271',
'JR157272',
'JR157273',
'JR157274',
'JR157275',
'JR157276',
'JR157277',
'JR157289',
'JR157320',
'JR157329',
'JR157330',
'JR157331',
'JR157332',
'JR157333',
'JR157334',
'JR157335',
'JR157396',
'JR157413',
'JR157426',
'JR157427',
'JR157435',
'JR157438',
'JR157445',
'JR157451',
'JR157465',
'JR157471',
'JR157487',
'JR157518',
'JR174405',
'JR174791']



dict_table = {"010002": "x_fund_info_fundaccount",
              "010003": "x_fund_info_private",
              "010004": "x_fund_info_securities",
              "010005": "x_fund_info_futures",
              "020001": "d_fund_info",
              "020002": "d_fund_info",
              "020003": "d_fund_info",
              }
source='020003'

fund_id='JR147099'

# df = pd.read_sql("select source_id,source from id_match WHERE matched_id='{}' \
#     and is_used=1 AND source not in ('03','04','05') and source not like '01%%'".format(fund_id), engine_base)
# df['fund_tabel'] = df['source'].apply(lambda x: dict_table.get(x))

df = pd.read_sql("select statistic_date,nav,source_id from \
 fund_nv_data_source_copy2 where fund_id ='{}'and source_id not IN ('03','04','05')".format(fund_id),engine_base)
data = df["source_id"]
col = data.drop_duplicates()
source = to_list(col)
dff = []
for i in source:
    df1=df[df["source_id"]==i]
    dff.append(df1)


df_m = pd.merge(dff[i] for i in range(len(dff),how='inner',on = 'statistic_date'))


def _muti_merge(df_list, iteration):
    """
    递归地将一列dataframe进行合并
    :param df_list: dataframe列表
    :param iteration: 迭代深度
    :return:
    合并后的dataframe
    """
    print(iteration)
    lenth = len(df_list)
    if lenth == 2:
        df_list = pd.merge(df_list[0], df_list[1], how='inner',on = 'statistic_date')
        return df_list
    elif lenth == 1:
        return df_list[0]
    elif lenth > 2:
        nt = round(lenth / 2)
        iteration += 1
        df_list = pd.merge(_muti_merge(df_list[:nt], iteration), _muti_merge(df_list[nt:], iteration),  how='inner',on = 'statistic_date')
        return df_list


a=_muti_merge(dff,1)

try:
    a.iloc[:,1] = a.iloc[:,1].apply(lambda x: '%.3f' % x)
    a.iloc[:,3] = a.iloc[:,3].apply(lambda x: '%.3f' % x)
    a.iloc[:, 5] = a.iloc[:, 5].apply(lambda x: '%.3f' % x)
    a.iloc[:, 7] = a.iloc[:, 7].apply(lambda x: '%.3f' % x)
    a.iloc[:, 9] = a.iloc[:, 9].apply(lambda x: '%.3f' % x)
    a.iloc[:, 11] = a.iloc[:, 11].apply(lambda x: '%.3f' % x)
except BaseException:
    pass
else:
    pass





